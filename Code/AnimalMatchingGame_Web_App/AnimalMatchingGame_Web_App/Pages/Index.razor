@attribute [RenderModeServer]
@page "/"

<PageTitle>Animal Matching Game</PageTitle>

<style>

    .container {
        width: 400px;
    }

    button {
        width: 100px;
        height: 100px;
        font-size: 50px;
    }
</style>

@if (!string.IsNullOrEmpty(bestTimeMessage))
{
    <h1>@bestTimeMessage</h1>
}
@if (ScoreTracker.LowestScore > 0)
{
    <h3>Best score: @ScoreTracker.LowestScore</h3>
}

<div class="container">
    <div class="row">
        @for (var animalNumber = 0;
        animalNumber < shuffledAnimals.Count;
        animalNumber++)
        {
            var animal = shuffledAnimals[animalNumber];
            var uniqueDescription =
            $"Button #{animalNumber}";
            <div class="col-3">
                <button type="button"  
                @onclick="@(async () => await ButtonClick(animal, uniqueDescription))"
                        class="btn btn-outline-dark">
                    <h1>@animal</h1>
                </button>
            </div>
        }
    </div>
    <div class="row">
        <h2>Matches found: @matchesFound</h2>
    </div>
    <div class="row">
        <h2>Time: @timeDisplay</h2>
    </div>
</div>


@using System.Timers
@inject HttpClient Http

@code {

    string bestTimeMessage = string.Empty;

    Timer timer = new Timer(100);
    int tenthsOfSecondsElapsed = 0;
    string timeDisplay = "";

    List<string> shuffledAnimals = new();
    int matchesFound = 0;

    private void SetUpGame()
    {
        shuffledAnimals = animalEmoji
          .OrderBy(item => Random.Shared.Next())
          .ToList();
        matchesFound = 0;
        timer = new Timer(100);
        timer.Elapsed += Timer_Elapsed;
        tenthsOfSecondsElapsed = 0;
    }

    protected override void OnInitialized()
    {
        SetUpGame();
    }

    List<string> animalEmoji = new()
  {
    "🐶","🐶",
    "🐺","🐺",
    "🐮","🐮",
    "🦊","🦊",
    "🐱","🐱",
    "🦁","🦁",
    "🐯","🐯",
    "🐹","🐹",
  };

    string lastAnimalFound = string.Empty;
    string lastDescription = string.Empty;
    private async Task ButtonClick(string animal, string animalDescription)
    {
        if (lastAnimalFound == string.Empty)
        {
            // First selection of the pair. Remember it.
            lastAnimalFound = animal;
            lastDescription = animalDescription;
            timer.Start();
        }
        else if ((lastAnimalFound == animal)
              && (animalDescription != lastDescription))
        {
            // Match found! Reset for next pair.
            lastAnimalFound = string.Empty;

            // Replace found animals with empty string to hide them.
            shuffledAnimals = shuffledAnimals
          .Select(a => a.Replace(animal, string.Empty))
          .ToList();
            matchesFound++;
            if (matchesFound == 8)
            {
                bestTimeMessage = await Http.GetStringAsync($"/scoretracker?score={tenthsOfSecondsElapsed / 10F}"); timer.Stop();
                timeDisplay += " - Play Again?";
                SetUpGame();
            }
        }
        else
        {
            // User selected a pair that don't match, reset selection.
            lastAnimalFound = string.Empty;
        }
    }

    private void Timer_Elapsed(object? source,
                        ElapsedEventArgs e)
    {
        InvokeAsync(
          () =>
          {
              tenthsOfSecondsElapsed++;
              timeDisplay =
                 (tenthsOfSecondsElapsed / 10F)
               .ToString("0.0s");
              StateHasChanged();
          }
        );
    }
}